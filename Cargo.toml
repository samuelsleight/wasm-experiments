[package]
name = "wasm-experiments"
version = "0.1.0"
authors = ["Samuel Sleight <samuel.sleight@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib"]
path = "src/rust/lib.rs"

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true

[features]
default = ["console_error_panic_hook"]

[dependencies]
# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = "0.2.45"
wasm-bindgen-futures = "0.4.18"
js-sys = "0.3.39"

futures = "0.3.7"

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator, so it's not enabled by default.
wee_alloc = { version = "0.4.2", optional = true }

boolinator = "2.4.0"
enumset = "1.0.0"

worldgen = "0.5.3"
circular-vec = { path = "circular-vec" }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# in debug mode.
console_error_panic_hook = { version = "0.1.1", optional = true }

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
version = "0.3.39"
features = [
    'console',
    'Document',
    'Element',
    'HtmlCanvasElement',
    'WebGl2RenderingContext',
    'WebGlBuffer',
    'WebGlProgram',
    'WebGlShader',
    'WebGlTexture',
    'WebGlUniformLocation',
    'Window']

[workspace]
